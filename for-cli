#!/usr/bin/env python
# foreman cli <david@rohr.se>

import urllib, urllib2, base64, json, sys
import optparse

def main():

    #################################################################

    # foreman settings
    username = 'foreman' # or use --username=
    password = 'foreman' # or use --password=
    baseurl = 'http://foreman.example.com' # or use --url=
    baseport = '3000' # or use --port=

    # foreman-proxy settings
    proxyusername = 'foreman' # or use --username=
    proxypassword = 'foreman' # or use --password=
    proxyurl = 'http://foreman-proxy.example.com' # or use --url=
    proxyport = '8443' # or use --port=

    #################################################################

    # if no input, show some love
    if len(sys.argv) < 2:
        sys.stderr.write('Usage: for-cli -h\n')
        sys.exit(1)

    # optparse values
    parser = optparse.OptionParser(usage="%prog [options] arg [query options]", version="%prog 0.8a")
    parser.add_option("-q", 
        metavar="QUERY", dest="query", default=False,
        choices=['facts', 'reports', 'run', 'puppetrun', 'os', 'hosts', 'ca', 'hostgroups', 'status', 'dashboard',], 
        action="store", help="query REST API of foreman or smart-proxy")
    parser.add_option("--verbose", 
        metavar="DEBUG", dest="verbose",
        action="store_true",  help="prints some debug stuff")
    parser.add_option("--username",
        metavar="USER", dest="username", default=False, 
        action="store", help="query with specific username")
    parser.add_option("--password",
        metavar="PASS", dest="password", default=False, 
        action="store", help="query with specific password")
    parser.add_option("--url", 
        metavar="URL", dest="baseurl", default=False, 
        action="store", help="query with specific url")
    parser.add_option("--port",
        metavar="PORT", dest="baseport", default=False,
        action="store", help="query with specific port")
    query_opts = optparse.OptionGroup(parser, 'Query Options',)
    query_opts.add_option("--host",
        metavar="HOST", dest="host", default=False, 
        action="store", help="query with specific host")
    parser.add_option_group(query_opts)
    (options, args) = parser.parse_args()

    # set query options
    if options.username:
        username = options.username
    if options.password:
        password = options.password
    if options.baseurl:
         baseurl = options.baseurl
         proxyurl = options.baseurl
    if options.baseport:
         baseport = options.baseport
         proxyport = options.baseport

    # debug stuff   
    if options.verbose:
        print 'USERNAME  :', username
        print 'PASSWORD  :', password
        print 'BASEURL   :', baseurl  
        print 'PROXYURL  :', proxyurl
        print 'PORT      :', baseport
        print 'PROXYPORT :', proxyport   
        print 'ARGV      :', sys.argv[1:] 
        print 'FUNCTION  :', options.query
        print 'HOST      :', options.host
        print 'ARGS      :', args 

    # ugly query switch
    if options.query:
        query = options.query
        # facts
        if query == 'facts':
            # if host is set, get facts for host
            if options.host:
                host = options.host
                url = "%s:%s/hosts/%s/facts" % (baseurl, baseport, host)
                print("getting facts for %s\n" % (host))
                get_data( url, username, password )
            else:
                # if specific fact is called, get all values for that fact
                if len(args) > 0:
                    fact = args[0]
                    url = "%s:%s/facts/%s/values" % (baseurl, baseport, fact)
                    print("getting hosts with %s\n" % (fact))
                    get_data( url, username, password )
                # if no argument is sent, list all facts
                else:
                    url = "%s:%s/facts" % (baseurl, baseport)
                    print("listing all facts")
                    get_data( url, username, password )
        # reports
        elif query == 'reports':
            # if host is set, get latest report for host
            if options.host:
                host = options.host
                url = "%s:%s/hosts/%s/reports/last" % (baseurl, baseport, host)
                print("getting latest report for %s\n" % (host))
                get_data( url, username, password )
            # if no specific host is set, list latest report
            else:
                url = "%s:%s/reports/last" % (baseurl, baseport)
                print("no specific host specified, getting latest")
                get_data( url, username, password )
        # operatingsystems
        elif query == 'os':
            url = "%s:%s/operatingsystems" % (baseurl, baseport)
            print("listing operatingsystems")
            get_data( url, username, password )
        # hostgroups, hosts, status, dashboard
        elif query == 'hostgroups' or query == 'hosts' or query == 'status' or query == 'dashboard':
            url = "%s:%s/%s" % (baseurl, baseport, query)
            print("getting %s" % (query))
            get_data( url, username, password )
        # ca certificates (smart-proxy)
        elif query == 'ca':
            url = "%s:%s/puppet/ca" % (proxyurl, proxyport)
            print("list of all puppet certificates")
            get_data( url, username, password )
        # puppetrun
        elif query == 'run' or query == 'puppetrun':
            if options.host:
                host = options.host
                url = "%s:%s/puppet/run" % (proxyurl, proxyport)
                # pretty? don't think so. 
                data = {'nodes':'foo'}
                data['nodes'] = host 
                postdata = urllib.urlencode(data)
                print("Trigger puppet run / kick on %s" % (host))
                post_data( url, username, password, postdata )
            else:
                print("Please specify --host= when using run")
                sys.exit(0)
        else:
            print("Bad query, probably not implemented yet")
            sys.exit(0)
    else:
        sys.exit(0)

# GET 
def get_data(url, username, password): 
    # send request with urllib2
    request = urllib2.Request(url)
    base64string = base64.encodestring('%s:%s' % (username, password))[:-1]
    request.add_header("Authorization", "Basic %s" % base64string)
    request.add_header("Content-Type", "application/json")
    htmlFile = urllib2.urlopen(request)
    # parse it with json
    htmlData = json.load(htmlFile)
    print json.dumps(htmlData, sort_keys=True, indent=1)
    htmlFile.close()

# POST
def post_data(url, username, password, postdata):
    # send request with urllib2
    request = urllib2.Request(url)
    base64string = base64.encodestring('%s:%s' % (username, password))[:-1]
    request.add_header("Authorization", "Basic %s" % base64string)
    request.add_data(postdata)
    response = urllib2.urlopen(request)
    response.close()

if __name__ == '__main__':
    main()
