#!/usr/bin/env python
# foreman cli <david@rohr.se>

import urllib2, base64, json, sys
import optparse

def main():

    # basic settings
    username = 'foreman' # or use sys.argv[2]
    password = 'foreman' # or use sys.argv[3]
    baseurl = 'http://foreman.example.com'

    # if no input, show some love
    usage = "usage: %prog -q arg [query options]"
    if len(sys.argv) < 2:
        sys.stderr.write('Usage: for-cli -h\n')
        sys.exit(1)

    # optparse values
    parser = optparse.OptionParser(usage="%prog -q arg [query options]", version="%prog 0.6")
    parser.add_option("-q",
        metavar="QUERY", dest="query", 
        default=False, action="store", 
        help="Query REST-API")
    parser.add_option("--verbose",
        metavar="DEBUG", dest="verbose",
        action="store_true", 
        help="Prints some debug stuff")
    query_opts = optparse.OptionGroup(
        parser, 'Query Options',)
    query_opts.add_option("--host",
        metavar="HOST", dest="host", 
        default=False, action="store", 
        help="Query REST-API for specific HOST")
    parser.add_option_group(query_opts)
    (options, args) = parser.parse_args()

    # debug stuff   
    if options.verbose:
        print 'USERNAME  :', username
        print 'PASSWORD  :', password
        print 'BASEURL   :', baseurl     
        print 'ARGV      :', sys.argv[1:] 
        print 'FUNCTION  :', options.query
        print 'HOST      :', options.host
        print 'ARGS      :', args 

    # ugly query switch
    if options.query:
        query = options.query
        # facts
        if query == 'facts':
            if options.host:
                host = options.host
                url = "%s/hosts/%s/facts" % (baseurl, host)
                print("getting facts for %s\n" % (host))
            else:
                fact = sys.argv[3]
                url = "%s/facts/%s/values" % (baseurl, fact)
                print("getting hosts with %s\n" % (fact))
        # reports
        if query == 'reports':
            if options.host:
                host = options.host
                url = "%s/hosts/%s/reports/last" % (baseurl, host)
                print("getting latest report for %s\n" % (host))
            else:
                url = "%s/reports/last" % (baseurl)
                print("no specific host specified, getting latest")
        # operatingsystems
        if query == 'os':
            url = "%s/operatingsystems" % (baseurl)
            print("listing operatingsystems")
        # hostgroup, hosts, status, dashboard
        if query == 'hostgroup' or query == 'hosts' or query == 'status' or query == 'dashboard':
            url = "%s/%s" % (baseurl, query)
            print("getting %s" % (query))
    else:
        sys.exit(0)
   
    # send request with urllib2
    request = urllib2.Request(url)
    base64string = base64.encodestring('%s:%s' % (username, password))[:-1]
    request.add_header("Authorization", "Basic %s" % base64string)
    request.add_header("Content-Type", "application/json")
    htmlFile = urllib2.urlopen(request)
    # parse it with json
    htmlData = json.load(htmlFile)
    print json.dumps(htmlData, sort_keys=True, indent=1)
    htmlFile.close()

if __name__ == '__main__':
    main()
